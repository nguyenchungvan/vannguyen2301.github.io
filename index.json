[
{
	"uri": "/",
	"title": "Deploying a Java Spring Boot Application on EC2 within a VPC",
	"tags": [],
	"description": "",
	"content": "Deploying a Java Spring Boot Application on EC2 within a VPC Overall This workshop is designed to provide participants with knowledge and practical experience in deploying a Java Spring Boot application on an EC2 instance within a Virtual Private Cloud (VPC). The session will focus on practices for secure and scalable deployments in a controlled network environment, leveraging AWS services.\nContent  Introduction  Preparation Deploy Springboot Application to EC2 instance Clean up resources  "
},
{
	"uri": "/3-accessibilitytoinstances/3.1-public-instance/",
	"title": "Create connect to EC2 server",
	"tags": [],
	"description": "",
	"content": "\rEC2 is located on a private subnet and cannot be connected in the usual way. In this lab, we use session manager to create a connection to the server.\n\rCreate a connection to EC2  Access the admin interface of the AWS System Manager service.   Select Fleet Manager. Select Account management. Select Configure Default Host Management Configuration.  On the Configure Default Host Management Configuration page.   Select Enable Default Host Management Configuration. Select IAM Role for Systems Manager to be able to manage your EC2. Select Configure.  Create a connection to EC2  Access the EC2 service management interface.   Select Instance Select the newly created EC2. Select Connect.  On the Connect to instance page.   Select Session Manager Select Connect.  The interface after connection is as shown below.\n"
},
{
	"uri": "/1-introduce/",
	"title": "Introduction",
	"tags": [],
	"description": "",
	"content": "Amazon Elastic Compute Cloud (EC2) is a cloud computing service from AWS that provides scalable and flexible computing power. EC2 allows you to launch virtual servers (also known as instances) to run applications in the AWS cloud environment.\nAmazon Virtual Private Cloud (VPC) is a service provided by Amazon Web Services (AWS) that allows users to create a private virtual network within the AWS cloud environment. With VPC, you can configure your own virtual network, including dividing it into subnets, setting up route tables, and managing gateways, all within a separate and secure space.\nKey Features of Amazon VPC:\n Private Networking: Create a virtual network with private IPs and configure private IPs for resources within the VPC. Network Segmentation: Divide the VPC into public and private subnets to categorize and control traffic flow. Gateways and Routing: Use Internet Gateway, NAT Gateway, and Route Tables to control access to and from the VPC. Security: Manage traffic with Security Groups and Network ACLs, and use VPC Peering to connect with other VPCs or on-premises networks.  Subnet is a range of IP addresses within your VPC. Subnets are used to divide a large network into smaller, more manageable sections and can optimize performance and security. Additionally, subnets are created to connect to AWS resources such as EC2 and RDS when you launch them. Subnets can connect to the internet, other VPCs, or your data center and route traffic through route tables.\nRoute table is a data structure in a network system used to determine how data traffic is routed to its destination within the network. Each route in the table specifies the IP address range where you want the traffic to go (destination) and the intermediate point (gateway, network interface, or connection) through which the traffic will pass before reaching the target (destination). Internet Gateway (IGW) is a networking service in Amazon Web Services (AWS) that connects your resources in a VPC (Virtual Private Cloud) to the Internet. It acts as a connection point between the VPC and the Internet, allowing resources within the VPC to send and receive traffic from the Internet.\nNAT (Network Address Translation) Gateway is an AWS service that provides internet access to resources within a VPC without allowing direct traffic from the Internet to those resources. NAT Gateway enables instances in a private subnet to send traffic to the Internet and receive responses without needing a Public IP.\nPublic IP is an IP address that a device or service uses to communicate directly with the Internet or other devices outside the local network. This address must be unique across the entire Internet. Private IP is an IP address used within a local network and cannot be accessed directly from the Internet. Private IPs are used for communication between devices within the same local network.\nSecurity Group is an essential feature of Amazon Web Services (AWS) that helps manage and control inbound and outbound network traffic for resources such as EC2 instances, RDS instances, and other services within a VPC (Virtual Private Cloud). Security Groups have two main features:\n Stateful Firewall: If you allow an inbound connection, responses from that connection are automatically allowed back, regardless of outbound rules, and vice versa. Connection Tracking: Security Groups maintain information about current network connections. This means that once a connection is established and allowed by an inbound rule, all responses from that connection are also allowed, even if there is no corresponding outbound rule.  Network Access Control List (NACL) is a security mechanism in AWS used to control incoming and outgoing traffic for subnets within a Virtual Private Cloud (VPC). NACL operates at the subnet level and provides an additional layer of security beyond Security Groups, helping manage and control access to resources within the VPC. NACL characteristics:\n Stateless: Each request in or out is evaluated independently according to the NACL rules. If you allow inbound traffic, you must also create a rule to allow outbound traffic. Unlike Security Groups, NACL rules can be set to explicitly allow or deny specific traffic.  An example of using NACL is when you need to block an IP address that has been connecting to an instance. While you can remove the user\u0026rsquo;s inbound rules in the Security Group, the connection between the user and the instance continues due to the connection tracking feature of the Security Group. With NACL, adding a rule to deny connections from the user\u0026rsquo;s IP will immediately disconnect the user from the instance.\nAmazon Relational Database Service (RDS) is a fully managed relational database service by AWS. It simplifies the management of relational databases in the cloud environment, offering flexible scalability, robust security, and high availability, enabling you to focus on developing applications without worrying about complex database management.\n"
},
{
	"uri": "/2-prerequiste/2.1-createec2/",
	"title": "Preparing VPC",
	"tags": [],
	"description": "",
	"content": "In this step, we will need to create a VPC network architecture with 2 public subnets, 2 private subnets, an internet gateway and a NAT gateway. The overview of the architecture after you complete this step will be as follows:\nCreate VPC  Access the VPC service management interface    Select Your VPCs.\n  Select Create VPC.\n  On the Step 1 page.   Select VPC and more to quickly create the VPC architecture as required. Fill in the VPC name and IPv4 range you want to create    In the Number of Availability Zones (AZs) section, select 2 AZs.\n  In the Number of public subnets section, select 2 subnets.\n  In the Number of private subnets section, select 2 subnets.\n  In the NAT gateways section, select 1 per AZ.\n  In the VPC endpoints section, select None.\n   Review the options and confirm the creation of the VPC Create VPC.  After the VPC is created, check the internal components of the VPC such as subnets or routing tables to see if they are correct.   public subnet routing table: routes traffic in the VPC and out through the internet gateway, shared by both public subnets.   private subnet routing table: routes traffic in the VPC and out through the NAT gateway, each routing table is used for each private subnet and the NAT gateway corresponding to that subnet.  "
},
{
	"uri": "/2-prerequiste/2.2-createec2rds/",
	"title": "Create EC2 and RDS",
	"tags": [],
	"description": "",
	"content": "Create EC2 Server and RDS In this step, we will create EC2 Server in private subnet and RDS in private subnet and same AZ as EC2 Server.\n Create EC2 Server Create RDS  "
},
{
	"uri": "/3-accessibilitytoinstances/3.2-private-instance/",
	"title": "Install Java, MVN and deploy application",
	"tags": [],
	"description": "",
	"content": "Install Java and MVN  Switch root account, update.  sudo su yum update Install Java 21  curl -fL -o https://corretto.aws/downloads/latest/amazon-corretto-21-x64-linux-jdk.tar.gz export JAVA_HOME=/urs/lib/jvm/java-21-amazon-corretto java -version Install MVN  sudo wget https://repos.fedorapeople.org/repos/dchen/apache-maven/epel-apache-maven.repo -O /etc/yum.repos.d/epel-apache-maven.repo sudo sed -i s/\\$releasever/6/g /etc/yum.repos.d/epel-apache-maven.repo\rsudo yum install -y apache-maven\rmvn -v\rUpload project file from computer to EC2 via AWS S3 In this lab, the project is copied from S3 Bucket to EC2 server via Internet Gateway and NAT Gateway, can use VPC Endpoint to increase security, performance and cost when connecting AWS services.\n\rFor EC2 to be able to download project file from S3, we need to assign roles to EC2 to be able to access S3.\n\r On the EC2 service management interface page.   Select Instances. Select EC2 Server. Select Action. Select Security. Select Modify IAM role.  Create an IAM role   Select Create new IAM role   In the Roles section in Identity and Access Management (IAM) interface, select Cre ate role.   On the next page select Trusted entity type as AWS service, in Service or use case select EC2.   Next step, select AmazonS3FullAccess permission for EC2, select Next.   Fill in Role name, Description, and review the created role, then select Create role.  Assign S3 access to EC2   Return to the page in step 1, refresh to reload the roles. Select the role EC2FullAccessS3. Select Update IAM role.  Copy the project to the server  aws s3 cp s3://van-bucket-01/My-Phone.zip /ssm-user\r\rIf EC2 has not been assigned S3 access rights, an error fatal error: Unable to locate credentials will appear.\n\rDeploy the application to EC2  Unzip the file  unzip myphone\rReconfigure the connection file to the database   Access the project configuration file  nano application.properties\r Edit url, username, password corresponding to the created RDS, then save the file.  Run the project  mvn spring-boot: run\r The project has run successfully on EC2.  Create Application Load Balancer   On the EC2 service management interface page, select Load Balancers. Select Create load balancer.   Select Create Application Load Balancer.   Fill in the ALB name, select Scheme Internet-facing to be able to connect to the running website, select Load banlancer IP address type IPv4.   In the Network mapping section, select the created VPC and 2 public subnets in 2 AZs inside the VPC to connect to the ALB.   Select the Security group created for ALB.   In the Listeners and routing section, select Create target group to create a Target group for ALB.   Select the target type Instance and enter the Target group name.   Select Protocal:Port, IP address type, Heal check, then select Next   Add the running instance to the target group, then select Create target group.   Return to the ALB creation page, refresh and select the target group you just created.   Review the options again and select Create load balancer.   Access the website from the ALB\u0026rsquo;s DNS   Result when the application is successfully deployed  Restore database from backup   In the EC2 session manager interface, install postgresql-client.  yum install postgresql -y\rpg_restore --version\r Restore the database from the fileb mybackup.sql  pg_restore -h \u0026lt;RDS-endpoint\u0026gt; -p \u0026lt;port\u0026gt; -U \u0026lt;username\u0026gt; -d \u0026lt;database\u0026gt; -v \u0026lt;filebackup.sql\u0026gt;\r\rThe version of postgresql from the backup file must match the version of postgresql installed on EC2.\n\r After restoring, check the website again.  Create Auto Scaling Group   Go to the EC2 service management interface page. Select Instances. Select EC2 Server. Select Action. Select Image and templates. Select Create image.   Fill in the image name and description.   Keep the default configurations, select Create image.   Switch to EC2 service management interface, select Auto Scaling Group, select Create Auto Scaling Group.   Fill in the Auto Scaling Group name and select Create launch template.   In the template creation interface, fill in the template name and description.   Select Application and OS Images which is the AMI created above.   Select the Instance type and Key pair you want.   Leave the default in Network settings.   Check the options again, select Create launch template.    Go to the ASG creation page, refresh the Launch template, select the launch template you just created.\n  Select Next.\n   On the next page, in Network select the lab\u0026rsquo;s VPC, select the 2 private subnets you need to create EC2 inside.   In the Load balancing section, select the created ALB, then select Next.   Fill in the number of EC2s you want to create, according to the architecture we need 2 EC2s in 2 different AZs. Fill in the minimum number of EC2s to maintain, the maximum number of EC2s to deploy.   Continue to select Next in Step 5 and Step 6. Review the settings again, select Create Auto Scaling Group.   After creating, you need to Attach the original EC2 to ASG. Select Instances. Select EC2 Server. Select Actions. Select Instances settings. Select Attach to Auto Scaling Group.   Select the newly created ASG.   After successfully assigning, in the Instance interface, delete the remaining instance.  "
},
{
	"uri": "/2-prerequiste/",
	"title": "Preparation ",
	"tags": [],
	"description": "",
	"content": "\rIn this lab, we\u0026rsquo;ll use the Amazon Linux 2 AMI operating system to deploy an application to EC2.\n\rIn this section, we\u0026rsquo;ll cover the steps and tools needed to successfully deploy a Spring Boot application on Amazon EC2. We need to implement the VPC network architecture, where the EC2 and RDS servers are located.\nContent  Prepare the VPC and related components Prepare EC2 and RDS  "
},
{
	"uri": "/3-accessibilitytoinstances/",
	"title": "Deploy Spring Boot application on EC2",
	"tags": [],
	"description": "",
	"content": "In this step, we will deploy our Spring Boot application to EC2\nContent 3.1. Connect to EC2 Server\n3.2. Install Java, MVN and deploy application\n"
},
{
	"uri": "/2-prerequiste/2.2-createec2rds/2.2.1-createec2/",
	"title": "Create EC2 instance",
	"tags": [],
	"description": "",
	"content": "Create Security Groups (SG) for ALB and EC2 First, we create SG for ALB:\n Access EC2 service management interface   Select Security Groups. Select Create security groups.  On the Step 1 page   Fill in the security group name, description and VPC information for the security group.   Configure Inbound rules: allow all connections to ALB. Configure Outbound rules: allow connections out of ALB by default. Select create SG.  Next, we create SG for EC2 similar to ALB:\n Configure Inbound rules: allow all connections from ALB to EC2. Configure Outbound rules: allow connections to EC2 by default. Select to create SG.  Create EC2 Server:\n Access EC2 service management interface   Select Instances. Select Launch instances.  On the Step 1 page   Enter the name of the EC2 to create. Select Amazon Machine Image as Amazon Linux 2 AMI Select Instance type as t2.micro.   In the Key pair section, select Create new key pair. Fill in the name, type (RSA) and format. Save the key pair in the project folder on your computer.   Select the newly created keypair. Select Edit in the Network settings section to configure the network for EC2   Select VPC as the newly created VPC. Select Subnet as private subnet 1. Select Auto-assign public IP: disable (because EC2 is in private subnet, auto-assign public IPv4 address has not been enabled) In Firewall, select the security group just created above for EC2. In Configure storage, leave the default 8 GiB gp2 for Root volume. Review the settings again, select Launch instance to initialize.  "
},
{
	"uri": "/2-prerequiste/2.2-createec2rds/2.2.2-createrds/",
	"title": "Create RDS",
	"tags": [],
	"description": "",
	"content": " Go to RDS service management interface   Select Databases. Select Create database.  On the Step 1 page   Select Standard create. Select the database type as PostgreSQL.   Select the PostgreSQL version. Select Template as Freetier.  Multi-AZ deployment options are only enabled in the Dev/Test and Production templates. With Multi-AZ DB cluster, there are two redundant DBs that can handle read traffic, providing higher availability and workload distribution. With Multi-AZ DB Instance, there is only one redundant DB that does not handle read traffic, and is only used for failover.\n\r In Settings, enter your cluster DB name, the master username used to log in to the database. Select Self managed to self-manage password authentication, enter the password and repeat the password to create.  Database cluster identifier is the database instance name, completely different from the database name.\n\r In the Instance configuration section, select the default DB instance class. You can select memory-optimized or compute-optimized classes depending on the purpose of using the database (Only available in Dev/Test and Production templates).   In the Storage section, select Storage type as gp2. Fill in the Allocated storage you need.   In the Connectivity section, select Compute resource from the newly created EC2.   Select Automatic setup to let AWS automatically create subnets for RDS. Select Public access as No to configure traffic routing to only allow databases to connect to EC2 in the same VPC. Databases cannot be connected from outside.   Fill in Database name in the Additional configuration section   Select the number of days to automatically retain backups Back up and Encrytion (if any).   In the Maintainance section, keep the default options. Review your configuration and estimated costs before selecting Create database.  The suggested cost calculation is for reference only and does not include backup storage, IO (if applicable), or data transfer costs.\n\rIt takes some time for AWS to create your database.\n"
},
{
	"uri": "/6-cleanup/",
	"title": "Clean up resources",
	"tags": [],
	"description": "",
	"content": "We will proceed with the following steps to delete the resources we created in this lab.\nDeleting ASG  Go to EC2 service management interface   Select Auto Scaling Group. Select ASGForEC2. Select Action. Select Delete, then enter delete to confirm. When deleting an ASG, all instances managed by the ASG are deleted.  Deleting ALB  Go to EC2 service management interface   Select Load balancer. Select ALBForWS1. Select Action. Select Delete, then fill in confirm to confirm.  Delete RDS  Access the RDS service management interface   Select Databases. Select database-1. Select Action. Select Delete.   Uncheck Create final snapshot and Retain automated backups, select I acknoledge \u0026hellip; to confirm deleting the database. Fill in delete me.  Delete VPC and related components  Access the VPC service management interface. Delete NAT gateways.   Select NAT gateways. Select each Nat gateway. Select Action. Select Delete, then enter delete to confirm. Do the same with the remaining Nat gateway.  Delete Elastic IP addresses   Select Elastic IPs. Select both Elastic IPs. Select Action. Select Release Elastic IP addresses, then enter Release to confirm.  Delete Internet gateway   Select Internet gateway. Select WorkShop01-igw. Select Detach from VPC. Select Detach internet gateway.   Select Internet gateway. Select WorkShop01-igw. Select Delete internet gateway, then enter delete to confirm.  Delete the connection of routing tables with subnets   Select Route tables. Select the routing table. Select Action. Select Edit subnet associations.   Uncheck the associated subnets. Select Save associations. Do the same with the remaining routing tables.  Delete VPC   Select Your VPCs. Select WorkShop01-vpc. Select Action. Select Delete VPC, then enter delete to confirm.  Check costs and invoices  Access the Billing and Cost Management interface.  Check the costs incurred when using services on AWS.  "
},
{
	"uri": "/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]